typedef struct {
    int codigo;
    int quantidade;
    char produto[50];
    float valor;
    int id;
} Pedido;

void consultarPedidos() { // função para ler e imprimir o arquivo "Pedidos" inteiro
    FILE* arquivo = fopen("pedidos.txt", "r");

    if (arquivo == NULL) {
        printf("Erro ao abrir o arquivo.\n");
        return;
    }

    printf("Aqui está a lista de pedidos feitos:\n\n");
    char linha[200];
    while (fgets(linha, sizeof(linha), arquivo) != NULL) { // le o arquivo linha por linha 
        printf("%s", linha); 
    }
    printf("\n");

    fclose(arquivo);
}

int contarPedidos(Pedido pedidos[], FILE *arquivo){ //conta o número de pedidos feitos, serve para numerar as comandas
    int i = 0;
    char linha[200];

    rewind(arquivo); //le o arquivo do começo

    while (fgets(linha, sizeof(linha), arquivo) != NULL) {

        if (strncmp(linha, "Código Comanda:", 15) == 0) { //compara se os 15 primeiros caracteres da linha são "Código Comanda:" 
            i++; 
        }
    }
    return i; //retorna o número de comandas do arquivo
}

float buscarPreco(char *nomeProduto) { // busca o preço do produto pedido
    FILE *arqProdutos = fopen("produtos.txt", "r");
    if (arqProdutos == NULL) {
        printf("Erro ao abrir o arquivo de produtos.\n");
        return -1;
    }

    Produto produtos[50];
    int totalProdutos = loadprodutos(produtos, arqProdutos); //busca o total de produtos cadastrados
    fclose(arqProdutos);

    for (int i = 0; i < totalProdutos; i++) {
        if (strcmp(produtos[i].nome, nomeProduto) == 0) { //itera sobre os nomes dos produtos cadastrados até encontrar uma correspondencia
            return produtos[i].valor;                     //retorna o valor daquele produto
        }
    }
    printf("Produto não encontrado.\n");
    return -1; 
}

int buscarId(char *nomeProduto) { //busca o id do produto pedido
    FILE *arqProdutos = fopen("produtos.txt", "r");
    if (arqProdutos == NULL) {
        printf("Erro ao abrir o arquivo de produtos.\n");
        return -1;
    }

    Produto produtos[50];
    int totalProdutos = loadprodutos(produtos, arqProdutos); //busca o total de produtos cadastrados
    fclose(arqProdutos);

    for (int i = 0; i < totalProdutos; i++) {
        if (strcmp(produtos[i].nome, nomeProduto) == 0) { //itera sobre os nomes dos produtos cadastrados até encontrar uma correspondencia
            return produtos[i].id;                        //retorna o id daquele produto
        }
    }
    printf("Produto não encontrado.\n");
    return -1; 
}

void deletarTudo() { //limpa todo o arquivo de comandas
    FILE* arquivo = fopen("pedidos.txt", "w"); // Abre com o w pra resetar o arquivo
    if (arquivo == NULL) {
        printf("Erro ao abrir o arquivo.\n");
        return;
    }
    fclose(arquivo);
    printf("Todos os pedidos foram deletados.\n");
}

void deletarComanda() {// deleta uma comanda especifica

    int codigoComanda;
    printf("Digite o código da comanda que deseja excluir: ");
    scanf("%d", &codigoComanda);

    FILE *arquivo = fopen("pedidos.txt", "r");
    FILE *transicao = fopen("transicao.txt", "w"); 

    if (arquivo == NULL || transicao == NULL) {
        printf("Erro ao abrir o arquivo.\n");
        if (arquivo) 
            fclose(arquivo);
        if (transicao) 
            fclose(transicao);
        return;
    }

    char linha[200];
    int copiar = 1; 

    while (fgets(linha, sizeof(linha), arquivo) != NULL) {

        if (strncmp(linha, "Código Comanda:", 15) == 0) { //compara se os 15 primeiros caracteres da linha são "Código Comanda:".
            int codigoAtual;
            sscanf(linha, "Código Comanda: %d", &codigoAtual); // analisa o texto da linha e armazena o codigo da comanda em codigo atual   
            copiar = (codigoAtual != codigoComanda); //resulta em 1 se os codigos forem diferentes e em 0 se forem iguais
        }

        if (copiar == 1) { 
            fputs(linha, transicao); //copia as comandas no arquivo temporário
        }
    }
    fclose(arquivo);
    fclose(transicao);

    remove("pedidos.txt"); //apaga o arquivo original
    rename("transicao.txt", "pedidos.txt"); //renomeia o arquivo temporario

    printf("Comanda %d excluída com sucesso.\n", codigoComanda);
}


void cadastrarPedido(){ 

    FILE *arqProdutos = fopen("produtos.txt", "r");
    if (arqProdutos == NULL) {
        printf("Erro ao abrir o arquivo.\n");
        return;
    }

    Produto produtos[50];
    int totalProdutos = loadprodutos(produtos, arqProdutos); //pega o total de pedidos lidos
    fclose(arqProdutos);

    printf("\n");
    printf("Os produtos disponiveis são:\n");
    for (int i = 0; i < totalProdutos; i++) {
        printf("%d - %s - %.2f\n", i, produtos[i].nome, produtos[i].valor); //lista em um indice, o nome e o valor dos produtos cadastrados 
    }

    FILE* arquivo = fopen("pedidos.txt", "a+");
    Pedido novoPedido;
    int quantItems, totalPedidos=0;
    Pedido pedidos[100];
    float totalComanda = 0.0;

    if (arquivo == NULL) {
        printf("Erro ao abrir o arquivo.\n");
        return;
    }

    totalPedidos = contarPedidos(pedidos, arquivo);// pega o total de pedidos
    int codigoComanda = totalPedidos + 1; //adiciona 1 ao total de pedidos para cadastrar o proximo

    printf("\n");
    printf("Quantos produtos diferentes deseja adicionar à comanda?\n");
    scanf("%d", &quantItems);

    fprintf(arquivo, "Código Comanda: %d\n", codigoComanda);

    for (int i = 0; i < quantItems; i++){ //itera sobre a quantidades de itens diferentes por comanda
        Pedido novoPedido;
        int escolhaProduto;

        printf("Produto %d:\n", i + 1);
        printf("Indice do produto: ");
        scanf("%d", &escolhaProduto); //o uauario escolhe o produto usando o indice que foi mostrado

        strcpy(novoPedido.produto, produtos[escolhaProduto].nome); // copia o nome do produto escolhido para a struct do pedido 

        novoPedido.valor = buscarPreco(novoPedido.produto); //busca o preço do produto escolhido
        if (novoPedido.valor == -1) {
            printf("Erro. Produto não encontrado.\n");
            continue;
        }

        novoPedido.id = buscarId(novoPedido.produto); //busca o ID do produto escolhido
        if (novoPedido.id == -1) {
            printf("Erro. Produto não encontrado.\n");
            continue;
        }

        printf("Quantidade: ");
        scanf("%d", &novoPedido.quantidade);

        float totalProduto = novoPedido.valor * novoPedido.quantidade; // calcula o preço total dos itens iguais 
        totalComanda += totalProduto; // soma para exibir o preço total da comanda

        fprintf(arquivo, "Produto: %s\nID: %d\nQuantidade: %d\nValor Unitário: %.2f\nTotal: %.2f\n", 
                novoPedido.produto, novoPedido.id, novoPedido.quantidade, novoPedido.valor, totalProduto);
        printf("Produto %d cadastrado na comanda com sucesso!\n", i + 1);
    }

    fprintf(arquivo, "\nValor Total da Comanda: %.2f\n\n", totalComanda);
    fclose(arquivo);
    printf("Todos os produtos foram cadastrados na comanda com sucesso!\n");
}

void pedido(){
    int escolha = 0;

    while(escolha != 5){
        printf("\n");
        printf("\nO que você deseja fazer?\n");
        printf("1. Adicionar novo pedido;\n");
        printf("2. Visualizar pedidos cadastrados;\n");
        printf("3. Excluir um pedido específico;\n");
        printf("4. Excluir todos os pedidos;\n");
        printf("5. Sair.\n");
        scanf("%d", &escolha);

        switch (escolha) {
            case 1:
                cadastrarPedido();
                break;
            case 2:
                consultarPedidos();
                break;
            case 3:
                deletarComanda();
                break;
            case 4:
                deletarTudo();
            case 5:
                break;
            default:
                printf("Escolha inválida.\n");    
            
        }    
    }    
}
